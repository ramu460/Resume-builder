Step 3: Document Your Views
Update your views with docstrings. Here's an example for your ResumeListCreateView:

python
from drf_yasg.utils import swagger_auto_schema

class ResumeListCreateView(generics.ListCreateAPIView):
    """
    get:
    Returns all resumes belonging to the authenticated user.

    post:
    Creates a new resume for the authenticated user.
    
    Throttle: Limited to 5 creations per hour (configured in throttles.py)
    """
    serializer_class = ResumeSerializer
    permission_classes = [permissions.IsAuthenticated]

    @swagger_auto_schema(
        operation_description="List all resumes",
        responses={200: ResumeSerializer(many=True)}
    )
    def get(self, request, *args, **kwargs):
        return super().get(request, *args, **kwargs)

    @swagger_auto_schema(
        operation_description="Create a resume",
        request_body=ResumeSerializer,
        responses={
            201: ResumeSerializer(),
            400: "Bad request",
            401: "Unauthorized"
        }
    )
    def post(self, request, *args, **kwargs):
        return super().post(request, *args, **kwargs)
Step 4: Access Swagger UI
Run your development server:

bash
python manage.py runserver
Open Swagger in your browser:

text
http://localhost:8000/swagger/
Step 5: Using JWT with Swagger
In Swagger UI, click the "Authorize" button (top-right)

In the dialog, enter:

text
Bearer your_jwt_token_here
(Replace with your actual token from /api/token/)

Click "Authorize" then "Close"

Step 6: Testing Endpoints
Find an endpoint (like /resumes/)

Click "Try it out"

For POST requests, fill in the example JSON

Click "Execute"

Step 7: Documenting Responses
Enhance your serializers with examples:

python
class ResumeSerializer(serializers.ModelSerializer):
    title = serializers.CharField(
        help_text="Title for your resume (e.g., 'Senior Developer')",
        example="Senior Software Engineer"
    )
    email = serializers.EmailField(
        help_text="Your professional email",
        example="john.doe@example.com"
    )
    # ... add to other fields as needed ...
Step 8: Handling Errors
Swagger will automatically document standard errors, but you can add custom ones:

python
@swagger_auto_schema(
    responses={
        403: "You don't have permission to access this resource",
        404: "Resume not found",
        429: "Too many requests - throttled"
    }
)
def retrieve(self, request, *args, **kwargs):
    return super().retrieve(request, *args, **kwargs)
Step 9: Viewing Alternative Documentation
You can also access ReDoc at:

text
http://localhost:8000/redoc/
Troubleshooting Tips
If something isn't working:

Check your console for errors

Verify drf_yasg is in INSTALLED_APPS

Clear your browser cache if UI isn't updating

Try in incognito mode to rule out caching issues

Your setup is already 90% complete! Just adding these documentation details will make your Swagger UI much more useful for API consumers.

